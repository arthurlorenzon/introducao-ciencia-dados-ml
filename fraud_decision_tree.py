# fraud_decision_tree.py
# =====================================
# Classifica√ß√£o de Fraudes usando √Årvore de Decis√£o
# Dataset: Payment Card Fraud Detection (Kaggle)
# =====================================

import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print("√Årvore de Decis√£o - Detec√ß√£o de Fraudes")
print("=" * 40)

# 1. Carregar dataset
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)
csv_path = os.path.join(DATA_DIR, "luxury_cosmetics_fraud_analysis_2025.csv")

if not os.path.exists(csv_path):
    print(f"‚ö†Ô∏è Dataset n√£o encontrado. Coloque o CSV em: {csv_path}")
    exit()

df = pd.read_csv(csv_path)
print("‚úÖ Dados carregados!")
print("Formato:", df.shape)

# Definir target
target_col = "is_fraud" if "is_fraud" in df.columns else df.columns[-1]
features_numericas = df.select_dtypes(include=[np.number]).columns.drop(target_col)

X = df[features_numericas].values
y = df[target_col].values

# 2. Divis√£o treino/teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
print("Treino:", X_train.shape, "Teste:", X_test.shape)

# 3. Configura√ß√£o da √Årvore de Decis√£o
print("\n‚öôÔ∏è Configurando modelo de √Årvore de Decis√£o...")

tree_model = DecisionTreeClassifier(
    criterion="gini",       # ou "entropy"
    max_depth=5,            # profundidade m√°xima da √°rvore
    min_samples_split=10,   # m√≠nimo de amostras para dividir um n√≥
    min_samples_leaf=5,     # m√≠nimo de amostras em uma folha
    random_state=42
)

# Treinamento
print("\nüöÄ Treinando modelo...")
tree_model.fit(X_train, y_train)

# 4. Predi√ß√£o e avalia√ß√£o
print("\nüìä Avaliando no conjunto de teste...")
y_pred = tree_model.predict(X_test)

acc = accuracy_score(y_test, y_pred)
print(f"Acur√°cia no teste: {acc:.4f}")

print("\nMatriz de Confus√£o:")
print(confusion_matrix(y_test, y_pred))

print("\nRelat√≥rio de Classifica√ß√£o:")
print(classification_report(y_test, y_pred))

print("\n‚úÖ Execu√ß√£o conclu√≠da!")